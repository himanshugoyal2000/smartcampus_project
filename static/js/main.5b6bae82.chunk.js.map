{"version":3,"sources":["App.js","serviceWorker.js","index.js","pic.jpg"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","message","setState","name","prompt","displayintro","state","count1","intro","button1","displayprojects","count2","projects","button2","displayconclusion","count3","conclusion","button3","intro1","map","e","i","react_default","a","createElement","key","project2","class","id","href","onclick","onClick","src","logo","action","method","enctype","type","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.5b6bae82.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport logo from './pic.jpg';\nimport './App.css';\nconst intro ={\n\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    \n     \n      this.state= {\n        count1 : 0,\n        count2 : 0,\n        count3 : 0,\n        button1 : 'Introduction',\n        button2 : 'Projects Done By Me',\n        button3 : 'Conclusion',\n        name : ' ',\n        intro : [ ],\n        projects : [ ],\n        conclusion : ' '\n      };\n    }\n    \n      \n      \n    \n    message=() =>\n    {\n       this.setState({name : prompt(\"Please Enter Your Name\")});\n    }\n    \n    displayintro=() =>\n    { \n      if(this.state.count1==0)\n      {\n      this.setState({intro : ['Name:Himanshu','College:BITS Pilani Hyderabad Campus','Branch:Msc. Chemistry','Id No:2018B2PS0753H','From:Jaipur','GitHub Username:himanshugoyal2000'],count1 : 1,button1 : 'Hide Intro'})\n      }\n      else if(this.state.count1==1)\n      {\n        this.setState({intro : [ ],count1 : 0,button1 : 'Introduction'})\n      }\n\n    }\n    displayprojects=() =>\n    {\n      if(this.state.count2==0)\n      {\n      this.setState({projects : ['Library Management System using Netbeans as FrontEnd and MySQL as BackEnd','DataBase to play cards using SQl','Random Room allotment in C'],count2 : 1,button2 : 'Hide Projects'})\n      }\n      else if(this.state.count2==1)\n      {\n        this.setState({projects : [ ],count2 : 0,button2 : 'Projects Done By me'})\n      }\n    }\n\n    displayconclusion=() =>\n\n    {\n      if(this.state.count3==0)\n      {\n      this.setState({conclusion : 'This is my First WebPage.Please dont judge.I am still learning and hope to improve.Thanks for visiting',count3 : 1,button3 : 'Hide Conclusion'})\n      }\n      else if(this.state.count3==1)\n      {\n        this.setState({conclusion : [ ],count3 : 0,button3 : 'Conclusion'})\n      }\n    }\n\n    \n\n\n    render() {\n      \n        let intro1=this.state.intro.map((e,i)=>{\n          return(\n            <li key={i}>{e}</li>\n          );\n        });\n        let project2=this.state.projects.map((e,i)=>{\n          return(\n            <li key={i}>{e}</li>\n          );\n        });\n      \n      return (\n        <body class=\"main\">\n        <header class=\"header1\" id=\"header\">\n        <h1>Welcome,{this.state.name}</h1>\n        </header>\n        <nav>\n          <ul class=\"list1\">\n            <li>\n              <a href=\"#header\">Home Page</a>\n            </li>\n            <li>\n              <a href=\"#profile\">Profile Page</a>\n            </li>\n            <li>\n              <a href=\"#projects\" onclick={this.displayprojects}>Projects done by me</a>\n            </li>\n            <li>\n              <a href=\"#\" onclick={this.message}>Welcome Message</a>\n            </li>\n            <li>\n              <a href=\"#feedback\">Send Feedback</a>\n            </li>\n            <li>\n              <a href=\"#conclusion\" onClick={this.displayconclusion}>Conclusion</a>\n            </li>\n\n          </ul>\n        </nav>\n        <main id=\"profile\">\n          <img src={logo} class=\"profilepic\"></img>\n          <br/>\n          <br/>\n          <br/>\n          <br/>\n          <br/>\n\n          <ol>\n            <li>\n              <button onClick={this.displayintro}>{this.state.button1}</button>\n              <ul>\n                {intro1}\n              </ul>\n            </li>\n            <li>\n              <button id=\"projects\" onClick={this.displayprojects}>{this.state.button2}</button>\n              <ol>\n                {project2}\n              </ol>\n            </li>\n            <li>\n              <button id=\"conclusion\" onClick={this.displayconclusion}>{this.state.button3}</button><br/>\n              {this.state.conclusion}\n            </li>\n          </ol>\n          \n          <aside >\n              <a href=\"#header\" >Home Page</a>\n              <a href=\"#profile\">Profile Page</a>\n              <a href=\"#projects\" onClick={this.displayprojects}>Projects done by me</a>\n            \n              <a href=\"#\" onClick={this.message}>Welcome Message</a>\n            \n              <a href=\"#feedback\">Send Feedback</a>\n            \n              <a href=\"#conclusion\" onClick={this.displayconclusion}>Conclusion</a>\n            \n         </aside>\n        </main>\n        <footer id=\"feedback\">\n          <form action=\"mailto:f20180753@hyderabad.bits-pilani.ac.in\" method=\"post\" enctype=\"text/plain\">\n            Name:<br/>\n            <input type=\"text\" name=\"name\"/><br/>\n              Email:<br/>\n              \n            <input type=\"text\" name=\"mail\"/><br/>\n             \n            <input type=\"submit\" value=\"Send Feedback\"/>\n          </form>\n        </footer>\n        \n        \n\n        </body>\n\n        \n\n\n      );\n    }\n  }\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pic.81bfa4e1.jpg\";"],"sourceRoot":""}